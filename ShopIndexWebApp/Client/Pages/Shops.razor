@page "/shops"
@using static ShopIndexWebApp.Client.Shared.ShopsFilter;
@using ShopIndexWebApp.Client.Shared;
@using ShopIndexWebApp.Shared;
@inject HttpClient Http

@implements IDisposable;

<PageTitle>Shops</PageTitle>

<h1>Shops</h1>

<ShopsFilter @bind-SearchText="SearchText" @bind-SearchText:event="OnSearchInput"
@bind-Sort="FilterSort" @bind-Sort:event="OnSort" />

@if (_busy)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row">
        @foreach (var shop in GetList())
        {
            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
                <ShopCard Shop="shop" />
            </div>

        }
    </div>
}

@code {
    private bool _busy;
    private IList<ShopIndexWebApp.Shared.Shop> shops;

    private string SearchText { get; set; } = "";
    private ShopFilterSort FilterSort { get; set; } = ShopFilterSort.Alphabetical;

    private System.Threading.Timer updateTimer;

    private IEnumerable<ShopIndexWebApp.Shared.Shop> GetList()
    {
        var newList = shops
        .Where(q =>
            q.Name.ToLower().Contains(SearchText.ToLower()));

        switch (FilterSort)
        {
            case ShopFilterSort.UpdateDate:
                newList = newList.OrderByDescending(q => q.LastUpdate);
                break;
            case ShopFilterSort.Alphabetical:
                newList = newList.OrderBy(q => q.Name);
                break;
        }

        return newList;
    }

    /*public static string RandomString(int length)
        {
        const string chars = "abcdefghijklmnopqrstuvxywz0123456789 ";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[Random.Shared.Next(s.Length)]).ToArray());
    }*/

    protected override async Task OnInitializedAsync()
    {
        _busy = true;

        shops = (await Http.GetFromJsonAsync<IEnumerable<ShopIndexWebApp.Shared.Shop>>($"API/Shop/Shops"))
            .Where(q => q.LastUpdate > DateTime.UtcNow.AddHours(-48))
            .OrderByDescending(q => q.LastUpdate)
            .ToList();

        var timer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }, null, 0, 1000);

        // Development code
        /*if (shops == null)
        {
            shops = new List<Models.Shop>();
            for (int i = 0; i < 20; i++)
            {
                shops.Add(new()
                    {
                        ComputerId = Random.Shared.Next(),
                        Name = RandomString(16),
                        Description = Random.Shared.Next(2) == 1 ? "I am a description" : null,
                        FirstSeen = DateTime.UtcNow.AddDays(-10),
                        LastUpdate = DateTime.UtcNow.AddSeconds(-Random.Shared.Next(0, 45)),
                        UID = Random.Shared.Next().ToString(),
                        Owner = "Shop Owner",
                        Software = "Shop software 2000",
                        Id = 0,
                        Location = "0 0 0",
                        LocationDescription = "In the mall",
                        LocationDimension = "overworld",
                    });
            }
        }*/

        _busy = false;
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }
}
