@page "/shop/{ShopUID}/item/{ItemID:int}"
@using Humanizer;
@using static ShopIndexWebApp.Client.Shared.ItemsFilter;
@inject HttpClient Http

@if (Shop is null)
{
    <PageTitle>Shop not found</PageTitle>
    <h3>Shop not found! :(</h3>
}
else if (Data is null)
{
    <PageTitle>Item not found</PageTitle>
    <h3>Item not found! :(</h3>
}
else
{
    <PageTitle>@Data.Name @@ @Shop.Name</PageTitle>
    <div class="row mb-3">
        <div class="col-sm-12 col-md-8 col-lg-6 col-xl-4">
            <div class="card border-0">
                <div class="row g-0">
                    <div class="col-3">
                        <div class="position-relative top-50 start-50 translate-middle">
                            <img src="/assets/items/@(Data.Item.Replace(':', '/')).png"
                                 class="img-thumbnail" alt="@Data.Item" title="@Data.Item">
                        </div>
                    </div>
                    <div class="col-9">
                        <div class="card-body">
                            <h3 class="m-0 p-0">@Data.Name</h3>
                            <p class="fs-5 text-secondary m-0">At <a class="text-secondary" href="/shop/@Shop.UID">@Shop.Name</a></p>
                            <p class="text-muted fst-italic">@Data.Item</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Data.Stock == 0 && !Data.MadeOnDemand)
    {
        <p class="text-danger fw-bold">This item is out of stock!</p>
    }

    <h4>Prices</h4>
    <ul>
        @foreach (var price in Data.GetPrices())
        {
            <li>
                <span>@price.Price @price.Currency</span>
                @if (price.Price % 1 > 0)
                {
                    var dec = price.Price % 1;
                    var mul = 1 / dec;
                    var com = (int)(price.Price * mul);
                    var items = (int)(com / price.Price);
                    <span class="d-block">@com @price.Currency get@(com == 1 ? "s" : "") you @items item@(items != 1 ? "s" : "")</span>
                }
            </li>
        }
    </ul>

    <h4>Details</h4>

    <div class="col-sm-12 col-md-12 col-lg-6 col-xl-4">
        <table class="table table-sm table-hover">
            <tbody>
                <tr>
                    <th scope="row">Stock</th>
                    <td>@(Data.Stock) pieces</td>
                </tr>

                <tr>
                    <th scope="row">Dynamic price</th>
                    <td>@(Data.DynamicPrices ? "Yes" : "No")</td>
                </tr>

                <tr>
                    <th scope="row">Shop buys this item</th>
                    <td>@(Data.ShopBuysItem ? "Yes" : "No")</td>
                </tr>

                <tr>
                    <th scope="row">Made on demand</th>
                    <td>@(Data.MadeOnDemand ? "Yes. There might be delay when dispensing the item." : "No")</td>
                </tr>

                <tr>
                    <th scope="row">NBT hash</th>
                    @if (!string.IsNullOrEmpty(Data.NBT))
                    {
                        <td>@Data.NBT</td>
                    }
                    else
                    {
                        <td class="text-muted fst-italic">None</td>
                    }
                </tr>

            </tbody>
        </table>

    </div>
}

@code {
    [Parameter]
    public string ShopUID { get; set; }
    [Parameter]
    public int ItemID { get; set; }

    public ShopIndexWebApp.Shared.Shop? Shop { get; set; }
    public ShopIndexWebApp.Shared.ShopItem? Data { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Shop = await Http.GetFromJsonAsync<ShopIndexWebApp.Shared.Shop?>($"API/Shop/Shops/{ShopUID}");
        if (Shop == null)
            return;

        Data = await Http.GetFromJsonAsync<ShopIndexWebApp.Shared.ShopItem?>($"API/Shop/Shops/{ShopUID}/Items/{ItemID}");
        if (Data == null)
            return;
    }
}
