@page "/shop/{UID}"
@using Humanizer;
@using ShopIndexWebApp.Client.Shared;
@using ShopIndexWebApp.Shared;
@using static ShopIndexWebApp.Client.Shared.ItemsFilter;
@inject HttpClient Http
@inject IJSRuntime JS;

@if (_busy)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (Data is null)
{
    <PageTitle>Shop not found</PageTitle>
    <h3>Shop not found! :(</h3>
}
else
{
    <PageTitle>@Data.Name</PageTitle>
    <h3>
        @Data.Name
        @if (Data.Owner != null)
        {
            <span class="fs-6 text-secondary"> by @Data.Owner</span>
        }
    </h3>

    <p class="fs-5 my-1">@Data.Description</p>

    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
            <div class="row">
                <div class="col-sm-12 col-md-6 fw-bold">Last seen</div>
                <div class="col-sm-12 col-md-6">@Data.LastUpdate.ToRelative()</div>

                <div class="col-sm-12 col-md-6 fw-bold">First seen</div>
                <div class="col-sm-12 col-md-6">@Data.FirstSeen.ToRelative()</div>

                @if (Data.Software != null)
                {
                    <div class="col-sm-12 col-md-6 fw-bold">Software</div>
                    <div class="col-sm-12 col-md-6">@Data.Software</div>
                }
            </div>
        </div>
    </div>

    <hr />

    <h4>Location</h4>

    @if (Data.Location != null)
    {
        <a class="btn btn-primary btn-sm" target="_blank" href="https://dynmap.sc3.io/?worldname=SwitchCraft&mapname=flat&zoom=7&x=@Coords[0]&y=@Coords[1]&z=@Coords[2]">DynMap</a>
        <CopyClipboard Value="@(@$"\track {Coords[0]} {Coords[1]} {Coords[2]}")"><button class="btn btn-primary btn-sm">&bsol;track</button></CopyClipboard>
    }

    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
            <div class="row">
                <div class="col-sm-12 col-md-6 fw-bold">Coordinates</div>
                <div class="col-sm-12 col-md-6">@(Data.Location ?? "No data")</div>

                <div class="col-sm-12 col-md-6 fw-bold">Dimension</div>
                <div class="col-sm-12 col-md-6">@(Data.LocationDimension ?? "No data")</div>

                <div class="col-sm-12 col-md-6 fw-bold">Description</div>
                <div class="col-sm-12 col-md-6">@(Data.LocationDescription ?? "No data")</div>

                <div class="col-sm-12 col-md-6 fw-bold">Transmission location</div>
                <div class="col-sm-12 col-md-6">@(Data.ActualLocation ?? "No data")</div>
            </div>
        </div>
    </div>

    <hr />

    <h4>Items</h4>

    <ItemsFilter @bind-SearchText="SearchText" @bind-SearchText:event="OnSearchInput"
    @bind-Sort="FilterSort" @bind-Sort:event="OnSort"
    @bind-SellOnly="SellOnly" @bind-SellOnly:event="OnSellOnlyChange" />

    <div class="row">
        @foreach (var item in GetList())
        {
            <div class="col-6 col-sm-6 col-md-6 col-lg-4 col-xl-3">
                <div style="cursor: pointer;">
                    <ItemCard Shop="Data" Item="item" @onclick="() => OpenItem(item)" />
                </div>
            </div>
        }
    </div>

    <!-- Item Modal -->
    <div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            @if (SelectedItem != null && SelectedItemShop != null)
            {
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="position-absolute top-0 end-0 z-1">
                            <button type="button" class="btn-close p-2" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="card border-0">
                            <div class="row g-0">
                                <div class="col-3">
                                    <div class="position-relative top-50 start-50 translate-middle">
                                        <img src="/assets/items/@(SelectedItem.Item.Replace(':', '/')).png"
                                             class="img-thumbnail" alt="@SelectedItem.Item" title="@SelectedItem.Item">
                                    </div>
                                </div>
                                <div class="col-9">
                                    <div class="card-body">
                                        <h3 class="m-0 p-0 modal-title">@SelectedItem.Name</h3>
                                        <p class="fs-5 text-secondary m-0">At <a class="text-secondary" target="_blank" href="/shop/@SelectedItemShop.UID">@SelectedItemShop.Name</a></p>
                                        <p class="text-muted fst-italic m-0">@SelectedItem.Item</p>
                                        @if (SelectedItemShop.Location != null)
                                        {
                                            var coords = SelectedItemShop.Location.Split(' ');
                                            <div>
                                                <a class="btn btn-primary btn-sm" target="_blank" href="https://dynmap.sc3.io/?worldname=SwitchCraft&mapname=flat&zoom=7&x=@coords[0]&y=@coords[1]&z=@coords[2]">DynMap</a>
                                                <CopyClipboard Value="@(@$"\track {coords[0]} {coords[1]} {coords[2]}")"><button class="btn btn-primary btn-sm">&bsol;track</button></CopyClipboard>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>



                        @if (SelectedItem.Stock == 0 && !SelectedItem.MadeOnDemand)
                        {
                            <p class="text-danger fw-bold">This item is out of stock!</p>
                        }

                        <h4>Prices</h4>
                        <ul>
                            @foreach (var price in SelectedItem.GetPrices())
                            {
                                <li>
                                    <span>@price.Price @price.Currency</span>
                                    @if (price.Price % 1 > 0)
                                    {
                                        var dec = price.Price % 1;
                                        var mul = 1 / dec;
                                        var com = (int)(price.Price * mul);
                                        var items = (int)(com / price.Price);
                                        <span class="d-block">@com @price.Currency get@(com == 1 ? "s" : "") you @items item@(items != 1 ? "s" : "")</span>
                                    }
                                </li>
                            }
                        </ul>

                        <h4>Details</h4>

                        <table class="table table-sm table-hover">
                            <tbody>
                                <tr>
                                    <th scope="row">Stock</th>
                                    <td>@(SelectedItem.Stock) pieces</td>
                                </tr>

                                <tr>
                                    <th scope="row">Dynamic price</th>
                                    <td>@(SelectedItem.DynamicPrices ? "Yes" : "No")</td>
                                </tr>

                                <tr>
                                    <th scope="row">Shop buys this item</th>
                                    <td>@(SelectedItem.ShopBuysItem ? "Yes" : "No")</td>
                                </tr>

                                <tr>
                                    <th scope="row">Made on demand</th>
                                    <td>@(SelectedItem.MadeOnDemand ? "Yes. There might be delay when dispensing the item." : "No")</td>
                                </tr>

                                <tr>
                                    <th scope="row">NBT hash</th>
                                    @if (!string.IsNullOrEmpty(SelectedItem.NBT))
                                    {
                                        <td>@SelectedItem.NBT</td>
                                    }
                                    else
                                    {
                                        <td class="text-muted fst-italic">None</td>
                                    }
                                </tr>

                            </tbody>
                        </table>

                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string? UID { get; set; }
    public ShopIndexWebApp.Shared.Shop? Data { get; set; }
    public List<ShopIndexWebApp.Shared.ShopItem> Items { get; set; }
    public string[] Coords { get; set; }

    private ShopItem? SelectedItem { get; set; }
    private ShopIndexWebApp.Shared.Shop? SelectedItemShop { get => Data; }

    private bool _busy = true;

    public string SearchText { get; set; } = "";
    public FilterSort FilterSort { get; set; } = FilterSort.Alphabetical;
    private bool SellOnly { get; set; } = false;

    private IEnumerable<ShopIndexWebApp.Shared.ShopItem> GetList()
    {
        var newList = Items
            .Where(q =>
                q.Name.ToLower().Contains(SearchText.ToLower())
                || q.Item.ToLower().Contains(SearchText.ToLower()))
            .Where(q => SellOnly ? q.ShopBuysItem : true)
            .OrderBy(q => q.Stock == 0);

        switch (FilterSort)
        {
            case FilterSort.LowPrice:
                newList = newList.ThenBy(q => q.GetPrices().First().Price);
                break;
            case FilterSort.HighPrice:
                newList = newList.ThenByDescending(q => q.GetPrices().First().Price);
                break;
            case FilterSort.LowStock:
                newList = newList.ThenBy(q => q.Stock);
                break;
            case FilterSort.HighStock:
                newList = newList.ThenByDescending(q => q.Stock);
                break;
            case FilterSort.Alphabetical:
                newList = newList.ThenBy(q => q.Name);
                break;
        }

        return newList;
    }

    protected override async Task OnInitializedAsync()
    {
        _busy = true;

        Data = await Http.GetFromJsonAsync<ShopIndexWebApp.Shared.Shop?>($"API/Shop/Shops/{UID}");
        if (Data == null)
            return;

        Items = (await Http.GetFromJsonAsync<IEnumerable<ShopIndexWebApp.Shared.ShopItem>?>($"API/Shop/Shops/{UID}/Items"))
            .Where(q => q.ShopId == Data.Id)
            .OrderBy(q => q.Stock == 0)
            .ThenBy(q => q.Name)
            .ToList();

        if (Data.Location != null)
        {
            Coords = Data.Location.Split(' ');
        }

        _busy = false;
    }

    private async Task OpenItem(ShopItem item)
    {
        SelectedItem = item;
        try
        {
            await JS.InvokeVoidAsync("toggleItemModal");
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e.Message);
        }
    }
}
