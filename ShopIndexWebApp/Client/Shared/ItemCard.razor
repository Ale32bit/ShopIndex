@using ShopIndexWebApp.Shared;
<div class="card m-1 @(Item.Stock == 0 ? "bg-body-secondary" : "")" @onclick="EmitClick" >
    <div class="row g-0">
        <div class="col-md-9">
            <div class="card-body">
                <h5 class="card-title m-0 p-0 text-body">
                    @Item.Name
                </h5>

                @if (Item.ShopBuysItem)
                {
                    <span class="badge rounded-pill bg-danger small position-absolute top-0 end-0 m-1 z-2"
                          title="This shop buys items">
                        SELL
                    </span>
                }

                @if (Item.DynamicPrices)
                {
                    <span class="badge rounded-pill bg-primary small position-absolute bottom-0 end-0 m-1 z-2"
                          title="Price may change">
                        Dynamic price
                    </span>
                }

                <p class="card-text m-0 mb-1 p-0 fs-6 text-body-secondary">@Shop.Name</p>

                @foreach (var price in Item.GetPrices())
                {
                    <h6 class="card-subtitle mb-2">@price.Price @price.Currency</h6>
                }
                <p class="card-text">Stock: <span class="@(Item.Stock == 0 ? "text-danger" : "")">@Item.Stock</span></p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="position-relative top-50 start-50 translate-middle">
                <img src="/assets/items/@(Item.Item.Replace(':', '/')).png"
                     class="img-fluid" alt="@Item.Item" title="@Item.Item">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Shop Shop { get; set; }

    [Parameter]
    public ShopItem Item { get; set; }

    [Parameter]
    public bool Clickable { get; set; } = true;

    [Parameter]
    public EventCallback<MouseEventArgs> onclick { get; set; }

    private async Task EmitClick(MouseEventArgs args)
    {
        if (onclick.HasDelegate)
            await onclick.InvokeAsync(args);
    }
}