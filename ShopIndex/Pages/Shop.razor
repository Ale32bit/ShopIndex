@page "/shop/{UID}"
@using Humanizer;
@using Microsoft.EntityFrameworkCore;
@using ShopIndex.Data;
@using static ShopIndex.Shared.ItemsFilter;
@inject IDbContextFactory<DataContext> DbFactory

@if (Data is null)
{
    <PageTitle>Shop not found</PageTitle>
    <h3>Shop not found! :(</h3>
}
else
{
    <PageTitle>@Data.Name</PageTitle>
    <h3>
        @Data.Name
        @if (Data.Owner != null)
        {
            <span class="fs-6 text-secondary"> by @Data.Owner</span>
        }
    </h3>

    <p class="fs-5 my-1">@Data.Description</p>

    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
            <div class="row">
                <div class="col-sm-12 col-md-6 fw-bold">Last seen</div>
                <div class="col-sm-12 col-md-6">@Data.LastUpdate.Humanize(utcDate: true)</div>

                <div class="col-sm-12 col-md-6 fw-bold">First seen</div>
                <div class="col-sm-12 col-md-6">@Data.FirstSeen.Humanize(utcDate: true)</div>

                @if (Data.Software != null)
                {
                    <div class="col-sm-12 col-md-6 fw-bold">Software</div>
                    <div class="col-sm-12 col-md-6">@Data.Software</div>
                }
            </div>
        </div>
    </div>

    <hr />

    <h4>Location</h4>

    @if (Data.Location != null)
    {
        <a class="btn btn-primary btn-sm" target="_blank" href="https://dynmap.sc3.io/?worldname=SwitchCraft&mapname=flat&zoom=7&x=@Coords[0]&y=@Coords[1]&z=@Coords[2]">DynMap</a>
        <CopyClipboard Value="@(@$"\track {Coords[0]} {Coords[1]} {Coords[2]}")"><button class="btn btn-primary btn-sm">&bsol;track</button></CopyClipboard>
    }

    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
            <div class="row">
                <div class="col-sm-12 col-md-6 fw-bold">Coordinates</div>
                <div class="col-sm-12 col-md-6">@(Data.Location ?? "No data")</div>

                <div class="col-sm-12 col-md-6 fw-bold">Dimension</div>
                <div class="col-sm-12 col-md-6">@(Data.LocationDimension ?? "No data")</div>

                <div class="col-sm-12 col-md-6 fw-bold">Description</div>
                <div class="col-sm-12 col-md-6">@(Data.LocationDescription ?? "No data")</div>
            </div>
        </div>
    </div>

    <hr />

    <h4>Items</h4>

    <ItemsFilter @bind-SearchText="SearchText" @bind-SearchText:event="OnSearchInput"
    @bind-Sort="FilterSort" @bind-Sort:event="OnSort"
    @bind-SellOnly="SellOnly" @bind-SellOnly:event="OnSellOnlyChange" />

    <div class="row">
        @foreach (var item in GetList())
        {
            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
                <ItemCard Shop="Data" Item="item" Clickable=false />
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string? UID { get; set; }
    public Models.Shop? Data { get; set; }
    public List<Models.ShopItem> Items { get; set; }
    public string[] Coords { get; set; }

    public string SearchText { get; set; } = "";
    public FilterSort FilterSort { get; set; } = FilterSort.Alphabetical;
    private bool SellOnly { get; set; } = false;

    private IEnumerable<Models.ShopItem> GetList()
    {
        var newList = Items
            .Where(q =>
                q.Name.ToLower().Contains(SearchText.ToLower())
                || q.Item.ToLower().Contains(SearchText.ToLower()))
            .Where(q => SellOnly ? q.ShopBuysItem : true)
            .OrderBy(q => q.Stock == 0);

        switch (FilterSort)
        {
            case FilterSort.LowPrice:
                newList = newList.ThenBy(q => q.GetPrices().First().Price);
                break;
            case FilterSort.HighPrice:
                newList = newList.ThenByDescending(q => q.GetPrices().First().Price);
                break;
            case FilterSort.LowStock:
                newList = newList.ThenBy(q => q.Stock);
                break;
            case FilterSort.HighStock:
                newList = newList.ThenByDescending(q => q.Stock);
                break;
            case FilterSort.Alphabetical:
                newList = newList.ThenBy(q => q.Name);
                break;
        }

        return newList;
    }

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();

        Data = await db.Shops.FirstOrDefaultAsync(q => q.UID == UID);
        if (Data == null)
            return;

        Items = await db.Items
        .Where(q => q.ShopId == Data.Id)
        .OrderBy(q => q.Stock == 0)
        .ThenBy(q => q.Name)
        .ToListAsync();

        if (Data.Location != null)
        {
            Coords = Data.Location.Split(' ');
        }
    }
}
