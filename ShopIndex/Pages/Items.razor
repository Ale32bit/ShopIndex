@page "/items"
@using Microsoft.EntityFrameworkCore;
@using ShopIndex.Data
@using ShopIndex.Models;
@inject IDbContextFactory<DataContext> DbFactory

<PageTitle>Catalogue</PageTitle>

<h1>Catalogue</h1>

<div class="card m-1">
    <div class="card-body">
        <h5 class="card-title">Filter</h5>
        <div class="input-group mb-3">
            <span class="input-group-text"><span class="oi oi-magnifying-glass" aria-hidden="true"></span></span>
            <input type="text" class="form-control" placeholder="Search item..." aria-label="Search item" @bind-value="SearchText" @bind-value:event="oninput">
        </div>

        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" id="cheapSort" @bind-value="OrderByPrice" @bind-value:event="onchange">
            <label class="form-check-label" for="cheapSort">Sort by cheapest price</label>
        </div>
    </div>
</div>



@if (busy)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var item in GetList())
        {
            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
                <ItemCard Shop="item.Shop" Item="item" />
            </div>
        }
    </div>
}

@code {
    private bool busy;
    string SearchText { get; set; } = "";
    bool OrderByPrice { get; set; } = false;
    List<ShopItem> ItemList { get; set; } = new List<ShopItem>();

    private IEnumerable<ShopItem> GetList()
    {
        var newList = ItemList
        .Where(q =>
            q.Name.ToLower().Contains(SearchText.ToLower())
            || q.Item.ToLower().Contains(SearchText.ToLower()));

        if(OrderByPrice)
        {
            newList = newList.OrderBy(q => q.Stock == 0).ThenBy(q => q.GetPrices().OrderBy(q => q).First().Price);
        }

        return newList;

    }

    protected override async Task OnInitializedAsync()
    {
        busy = true;
        using var db = DbFactory.CreateDbContext();

        ItemList = await db.Items
            .Include(s => s.Shop)
            .Where(q => q.Shop.LastUpdate > DateTime.UtcNow.AddHours(-12))
            .OrderBy(q => q.Stock == 0)
            .ThenByDescending(q => q.Shop.LastUpdate)
            .ThenBy(q => q.Name)
            .ToListAsync();

        busy = false;
    }
}
