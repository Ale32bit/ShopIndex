@page "/items"
@using Microsoft.EntityFrameworkCore;
@using ShopIndex.Data
@using ShopIndex.Models;
@using static ShopIndex.Shared.ItemsFilter;
@inject IDbContextFactory<DataContext> DbFactory

<PageTitle>Catalogue</PageTitle>

<h1>Catalogue</h1>

<ItemsFilter @bind-SearchText="SearchText" @bind-SearchText:event="OnSearchInput"
@bind-Sort="FilterSort" @bind-Sort:event="OnSort" />

@if (busy)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var item in GetList())
        {
            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
                <ItemCard Shop="item.Shop" Item="item" />
            </div>
        }
    </div>
}

@code {
    private bool busy;
    List<ShopItem> ItemList { get; set; } = new List<ShopItem>();

    private string SearchText { get; set; } = "";
    private FilterSort FilterSort { get; set; } = FilterSort.None;

    private IEnumerable<ShopItem> GetList()
    {
        var newList = ItemList
        .Where(q =>
            q.Name.ToLower().Contains(SearchText.ToLower())
            || q.Item.ToLower().Contains(SearchText.ToLower()))
            .OrderBy(q => q.Stock == 0);

        switch (FilterSort)
        {
            case FilterSort.LowPrice:
                newList = newList.ThenBy(q => q.GetPrices().First().Price);
                break;
            case FilterSort.HighPrice:
                newList = newList.ThenByDescending(q => q.GetPrices().First().Price);
                break;
            case FilterSort.LowStock:
                newList = newList.ThenBy(q => q.Stock);
                break;
            case FilterSort.HighStock:
                newList = newList.ThenByDescending(q => q.Stock);
                break;
            case FilterSort.Alphabetical:
                newList = newList.ThenBy(q => q.Name);
                break;
        }

        return newList;
    }

    protected override async Task OnInitializedAsync()
    {
        busy = true;
        using var db = DbFactory.CreateDbContext();

        ItemList = await db.Items
            .Include(s => s.Shop)
            .Where(q => q.Shop.LastUpdate > DateTime.UtcNow.AddHours(-48))
            .OrderByDescending(q => q.Shop.LastUpdate)
            .ToListAsync();

        busy = false;
    }
}
